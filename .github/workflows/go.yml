on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  createrelease:
    name: createrelease
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup version name
        id: set_version
        run: |
          build_version="$(git rev-parse --short HEAD)"
          echo "Building Version: $build_version"
          echo "build_version=$build_version" >> $GITHUB_ENV
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.build_version }}
          release_name: Release ${{ env.build_version }}
          draft: true
          prerelease: false
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  build:
    needs: [createrelease]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        target: [ 'linux', 'windows', 'darwin' ]
    steps:
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  CHECKOUT CODE AND SETUP GOLANG
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  SET RELEASE INFO
      - name: Version Name
        id: set_version
        run: |
          build_version="$(git rev-parse --short HEAD)"
          echo "::debug::Building Version: $build_version"
          case "${{ matrix.target }}" in
            windows) file_type="zip";;
            *) file_type="tgz";;
          esac
          echo "build_version=$version" >> $GITHUB_ENV
          echo "file_type=$file_type" >> $GITHUB_ENV
          echo "package_name=entando-go-tools.$build_version.${{ matrix.target }}.$file_type" >> $GITHUB_ENV
      - name: Load Release URL File
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Process Release URL File
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_ENV
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  BUILD & PACK
      - name: Build
        run: |
          mkdir ./bin
          GOOS='${{ matrix.target }}' go build -o ./bin/ -v ./...
          cd ./bin
          case "${{ env.file_type }}" in
            zip)  zip '${{ env.package_name }}' *;;
            *)    tar -czf '${{ env.package_name }}' *;;
          esac
          cd -
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.upload_url }}
          asset_path: 'bin/${{ env.package_name }}'
          asset_name: '${{ env.package_name }}'
          asset_content_type: application/octet-stream
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
